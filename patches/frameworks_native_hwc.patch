From 03ff918235ff34a9d8e18c383a6bb556ed7b82b7 Mon Sep 17 00:00:00 2001
From: Billy Laws <blaws05@gmail.com>
Date: Fri, 13 Nov 2020 22:46:54 +0000
Subject: [PATCH] Force client composition when requested by nvidia custom
 layer requests

Probably a hack, switch has graphical glitches without this.
---
 libs/vr/libvrflinger/hwc_types.h              |  2 ++
 .../impl/OutputLayerCompositionState.h        |  3 +++
 .../DisplayHardware/HWComposer.cpp            | 27 ++++++++++++++++---
 services/surfaceflinger/Layer.cpp             | 12 +++++++++
 services/surfaceflinger/Layer.h               |  2 ++
 5 files changed, 42 insertions(+), 4 deletions(-)

diff --git a/libs/vr/libvrflinger/hwc_types.h b/libs/vr/libvrflinger/hwc_types.h
index 8b5c3b3e7..263cf6162 100644
--- a/libs/vr/libvrflinger/hwc_types.h
+++ b/libs/vr/libvrflinger/hwc_types.h
@@ -231,6 +231,8 @@ struct Error final : public Wrapper<HWC2::Error> {
 struct LayerRequest final : public Wrapper<HWC2::LayerRequest> {
   enum : ValueType {
     ClearClientTarget = HWC2_LAYER_REQUEST_CLEAR_CLIENT_TARGET,
+    HintCompositionDeviceOverlay = HWC2_LAYER_REQUEST_HINT_COMPOSITION_DEVICE_OVERLAY,
+    HintLowLatency = HWC2_LAYER_REQUEST_HINT_LOW_LATENCY,
   };
 
   LayerRequest() : Base(0) {}
diff --git a/services/surfaceflinger/CompositionEngine/include/compositionengine/impl/OutputLayerCompositionState.h b/services/surfaceflinger/CompositionEngine/include/compositionengine/impl/OutputLayerCompositionState.h
index b78e9e007..d55654361 100644
--- a/services/surfaceflinger/CompositionEngine/include/compositionengine/impl/OutputLayerCompositionState.h
+++ b/services/surfaceflinger/CompositionEngine/include/compositionengine/impl/OutputLayerCompositionState.h
@@ -48,6 +48,9 @@ struct OutputLayerCompositionState {
     // If true, when doing client composition, the target may need to be cleared
     bool clearClientTarget{false};
 
+    bool hintCompositionDeviceOverlay{false};
+    bool hintLowLatency{false};
+
     // The display frame for this layer on this output
     Rect displayFrame;
 
diff --git a/services/surfaceflinger/DisplayHardware/HWComposer.cpp b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
index 1099041b4..e6eff4880 100644
--- a/services/surfaceflinger/DisplayHardware/HWComposer.cpp
+++ b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
@@ -491,13 +491,32 @@ status_t HWComposer::prepare(DisplayId displayId, const compositionengine::Outpu
         }
 
         state.clearClientTarget = false;
+        state.hintCompositionDeviceOverlay = false;
+        state.hintLowLatency = false;
+
         if (auto it = layerRequests.find(hwcLayer.get()); it != layerRequests.end()) {
             auto request = it->second;
-            if (request == HWC2::LayerRequest::ClearClientTarget) {
+            if ((static_cast<uint32_t>(request) &
+                 static_cast<uint32_t>(HWC2::LayerRequest::ClearClientTarget)) ==
+                 static_cast<uint32_t>(HWC2::LayerRequest::ClearClientTarget)) {
                 state.clearClientTarget = true;
-            } else {
-                LOG_DISPLAY_ERROR(displayId,
-                                  ("Unknown layer request " + to_string(request)).c_str());
+            }
+
+            if ((static_cast<uint32_t>(request) &
+                 static_cast<uint32_t>(HWC2::LayerRequest::HintCompositionDeviceOverlay)) ==
+                 static_cast<uint32_t>(HWC2::LayerRequest::HintCompositionDeviceOverlay)) {
+                (*state.hwc).hwcCompositionType = Hwc2::IComposerClient::Composition::CLIENT;
+                auto error = (*state.hwc)
+                             .hwcLayer->setCompositionType(
+                                static_cast<HWC2::Composition>(Hwc2::IComposerClient::Composition::CLIENT));
+                ALOGE_IF(error != HWC2::Error::None,
+                         "Failed to set client composition for overlay: (%d)",
+                         static_cast<int32_t>(error));
+                displayData.hasClientComposition = true;
+            }
+
+            if ((static_cast<uint32_t>(request) & static_cast<uint32_t>(HWC2::LayerRequest::HintLowLatency)) == static_cast<uint32_t>(HWC2::LayerRequest::HintLowLatency)) {
+                state.hintLowLatency = true;
             }
         }
     }
diff --git a/services/surfaceflinger/Layer.cpp b/services/surfaceflinger/Layer.cpp
index 3ee4ef129..5ff31a4fa 100644
--- a/services/surfaceflinger/Layer.cpp
+++ b/services/surfaceflinger/Layer.cpp
@@ -600,6 +600,18 @@ bool Layer::getClearClientTarget(const sp<const DisplayDevice>& display) const {
     return outputLayer->getState().clearClientTarget;
 }
 
+bool Layer::getHintCompositionDeviceOverlay(const sp<const DisplayDevice>& display) const {
+    const auto outputLayer = findOutputLayerForDisplay(display);
+    LOG_FATAL_IF(!outputLayer);
+    return outputLayer->getState().hintCompositionDeviceOverlay;
+}
+
+bool Layer::getHintLowLatency(const sp<const DisplayDevice>& display) const {
+    const auto outputLayer = findOutputLayerForDisplay(display);
+    LOG_FATAL_IF(!outputLayer);
+    return outputLayer->getState().hintLowLatency;
+}
+
 bool Layer::addSyncPoint(const std::shared_ptr<SyncPoint>& point) {
     if (point->getFrameNumber() <= mCurrentFrameNumber) {
         // Don't bother with a SyncPoint, since we've already latched the
diff --git a/services/surfaceflinger/Layer.h b/services/surfaceflinger/Layer.h
index b46eb112e..8f78389c3 100644
--- a/services/surfaceflinger/Layer.h
+++ b/services/surfaceflinger/Layer.h
@@ -491,6 +491,8 @@ public:
     Hwc2::IComposerClient::Composition getCompositionType(
             const sp<const DisplayDevice>& display) const;
     bool getClearClientTarget(const sp<const DisplayDevice>& display) const;
+    bool getHintCompositionDeviceOverlay(const sp<const DisplayDevice>& display) const;
+    bool getHintLowLatency(const sp<const DisplayDevice>& display) const;
     void updateCursorPosition(const sp<const DisplayDevice>& display);
 
     virtual bool shouldPresentNow(nsecs_t /*expectedPresentTime*/) const { return false; }
-- 
2.28.0

