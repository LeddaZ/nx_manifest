From 7d164046c984b09f791964c402b59134e6672441 Mon Sep 17 00:00:00 2001
From: Billy Laws <blaws05@gmail.com>
Date: Wed, 16 Dec 2020 21:11:11 +0000
Subject: [PATCH] NvCPL: Updates from stock 8.2.0 and significant code cleanup

---
 core/java/com/nvidia/NvAppProfileService.java | 234 ++++++++----------
 core/java/com/nvidia/NvAppProfiles.java       | 146 +++--------
 .../com/nvidia/NvCPLSvc/NvAppProfile.java     |  33 ++-
 .../com/nvidia/NvCPLSvc/NvSaverAppInfo.java   | 126 +++++-----
 core/java/com/nvidia/NvConstants.java         |   6 +-
 core/java/com/nvidia/NvWhitelistService.java  |  95 +++++--
 .../profilemanager/NvAppProfileSettingId.java | 170 +++++++------
 .../nvidia/profilemanager/ProfileTypeId.java  |  10 +-
 core/res/res/values/symbols.xml               |   1 +
 .../res/xml/tv_launhcer_app_white_list.xml    |  10 +
 10 files changed, 390 insertions(+), 441 deletions(-)
 create mode 100644 core/res/res/xml/tv_launhcer_app_white_list.xml

diff --git a/core/java/com/nvidia/NvAppProfileService.java b/core/java/com/nvidia/NvAppProfileService.java
index 4b03b3deccd..b4c33ee291d 100644
--- a/core/java/com/nvidia/NvAppProfileService.java
+++ b/core/java/com/nvidia/NvAppProfileService.java
@@ -17,64 +17,47 @@
  * Copyright (C) 2009 The Android Open Source Project
  */
 
-/**
- * @file
- * <b>NVIDIA Tegra Android Power Management</b>
- *
- * @b Description: Exposes App Profiles system
- *    to frameworks
- */
-
 package com.nvidia;
-import android.os.SystemProperties;
-import android.util.Log;
+
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.PackageManager;
-import android.hardware.input.InputManager;
-import android.os.PowerManager;
+import android.content.res.Resources;
+import android.graphics.drawable.Drawable;
+import android.os.SystemProperties;
+import android.os.UserHandle;
+import android.util.Log;
 
 import com.nvidia.profilemanager.NvAppProfileSettingId;
 
 /**
  * @hide
- *
  */
 public class NvAppProfileService {
     private static final String TAG = "NvAppProfileService";
+    private static final String APP_START_ACTION = "com.nvidia.NvAppProfileService.action.APP_START";
+    private static final String APP_START_TARGET_PACKAGE = "com.nvidia.peripheralservice";
     private static final String FEATURE_POWER_BUDGET_CONTROL = "nvidia.feature.power_budget_control";
     private static final String FEATURE_FAN_ON_DEVICE = "nvidia.feature.fan_on_device";
-    private NvAppProfiles mAppProfile;
-    private PowerManager mPowerManager;
-    private InputManager mInputManager;
-    private NvWhitelistService mWhitelistService;
-    private Context mContext;
-    private boolean enableAppProfiles;
-    private boolean pbcEnabled;
-    private boolean fanCapEnabled;
-    private boolean initAppProfiles;
-    private boolean isStylusSupported;
-
-    public NvAppProfileService (Context context) {
-      Context appContext = context.getApplicationContext();
-      if (appContext == null) {
-          mContext = context;
-      } else {
-          mContext = appContext;
-      }
-      mPowerManager = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
-      mAppProfile = new NvAppProfiles(mContext);
-      mWhitelistService = new NvWhitelistService(mContext);
-      pbcEnabled = false;
-      fanCapEnabled = false;
-      initAppProfiles = false;
-      isStylusSupported = SystemProperties.getBoolean("ro.feature.stylus", false);
-      if (isStylusSupported) {
-          try {
-              mInputManager = (InputManager)mContext.getSystemService(Context.INPUT_SERVICE);
-          } catch (Exception e){
-              Log.w(TAG, "InputManager not started: " + e);
-          }
-      }
+
+    private final NvAppProfiles mAppProfile;
+    private final NvWhitelistService mWhitelistService;
+    private final Context mContext;
+
+    private boolean mInitialisedAppProfiles = false;
+    private boolean mFanCapEnabled = false;
+    private boolean mPbcEnabled = false;
+
+    public NvAppProfileService(Context context) {
+        Context appContext = context.getApplicationContext();
+        if (appContext == null) {
+            mContext = context;
+        } else {
+            mContext = appContext;
+        }
+
+        mAppProfile = new NvAppProfiles(mContext);
+        mWhitelistService = new NvWhitelistService(mContext);
     }
 
     private static String getPackageName(String appName) {
@@ -86,61 +69,51 @@ public class NvAppProfileService {
         return appName.substring(0, index);
     }
 
-    public boolean canForceHwUi(String appName) {
-      if (appName == null)
-          return false;
-
-      final String packageName = getPackageName(appName);
-
-      if (packageName == null)
-          return false;
-
-      int forceHwUi = mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.FORCE_HW_UI);
-
-      if (forceHwUi <= 0)
-        return false;
-
-      return true;
-    }
-
-    public boolean appStylusFingerOnlyMode(String packageName) {
-      if (packageName == null)
-          return true;
-
-      int mode = mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.STYLUS_FINGER_ONLY_MODE);
-
-      if (mode != 0)
-        return true;
-
-      return false;
-    }
-
     /*
      * These are functions that depend on NvAppProfiles and may or may not
      * be supported for certain platforms. In the latter case, these methods
      * should return -1.
      */
     public boolean getAppProfileFRCEnable(String packageName) {
-      return packageName != null && mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.VIDEO_FRC_ENABLE) == 1;
+        return packageName != null && mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.VIDEO_FRC_ENABLE) == 1;
     }
 
     public boolean getAppProfileCreateSecureDecoder(String packageName) {
-      return packageName != null && mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.VIDEO_SECURE_DECODE) == 1;
+        return packageName != null && mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.VIDEO_SECURE_DECODE) == 1;
     }
 
     public boolean getAppProfileTSFilterEnable(String packageName) {
-      return packageName != null && mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.VIDEO_TS_FILTERING) == 1;
+        return packageName != null && mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.VIDEO_TS_FILTERING) == 1;
+    }
+
+    public boolean getAppProfileMediaEnableMsdHal(String packageName) {
+        return packageName != null && this.mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.MEDIA_ENABLE_MSD_HAL) == 1;
     }
 
     public boolean getAppProfileNvidiaCertification(String packageName) {
-      return packageName != null && mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.NVIDIA_VIDEO_CERTIFICATION_ENABLED) == 1;
+        return packageName != null && mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.NVIDIA_VIDEO_CERTIFICATION_ENABLED) == 1;
     }
 
-    public int killProcessBelowAdj(String packageName) {
-      if (packageName == null) {
-          return -1;
-      }
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.KILL_PROCESS_BELOW_ADJ);
+    public String customizeAppBanner(String packageName) {
+        if (packageName == null) return null;
+
+        final String bannerName = mAppProfile.getApplicationProfileString(packageName, NvAppProfileSettingId.WHITELIST_CUSTOMIZE_BANNER);
+        if (bannerName != null) return bannerName;
+
+        return mWhitelistService.getBannerName(packageName);
+    }
+
+    public Drawable getBannerDrawable(String packageName) {
+        final String bannerName = customizeAppBanner(packageName);
+        if (bannerName == null || bannerName.length() == 0) {
+            return null;
+        }
+
+        final Resources systemResources = mContext.getResources().getSystem();
+        final int drawableResourceId = systemResources.getIdentifier(bannerName, "drawable", "android");
+        if (drawableResourceId == 0) return null;
+
+        return systemResources.getDrawable(drawableResourceId);
     }
 
     public NvWhitelistService getWhitelistService() {
@@ -148,120 +121,109 @@ public class NvAppProfileService {
     }
 
     public boolean getAppProfileDisableApp(String packageName) {
-      boolean z = true;
-      if (packageName == null) {
-          return false;
-      }
-      if (mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.DISABLE_APP) != 1) {
-          z = false;
-      }
-      return z;
+        return packageName != null && mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.DISABLE_APP) == 1;
     }
 
     private int getAppProfileCpuScalingMinFreq(String packageName) {
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.SCALING_MIN_FREQ);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.SCALING_MIN_FREQ);
     }
 
     private int getAppProfileCpuCoreBias(String packageName) {
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.CORE_BIAS);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.CORE_BIAS);
     }
 
     private int getAppProfileGpuScaling(String packageName) {
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.GPU_SCALING);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.GPU_SCALING);
     }
 
     private int getAppProfileCpuMaxNormalFreq(String packageName) {
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.CPU_FREQ_BIAS);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.CPU_FREQ_BIAS);
     }
 
     private int getAppProfileCpuMaxNormalFreqPercent(String packageName) {
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.MAX_CPU_FREQ_PCT);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.MAX_CPU_FREQ_PCT);
     }
 
     private int getAppProfileCpuMinCore(String packageName) {
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.MIN_CPU_CORES);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.MIN_CPU_CORES);
     }
 
     private int getAppProfileCpuMaxCore(String packageName) {
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.MAX_CPU_CORES);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.MAX_CPU_CORES);
     }
 
     private int getAppProfileGpuCbusCapLevel(String packageName) {
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.GPU_CORE_CAP);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.GPU_CORE_CAP);
     }
 
     private int getAppProfileEdpMode(String packageName) {
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.EDP_MODE);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.EDP_MODE);
     }
 
     private int getAppProfilePbcPwr(String packageName) {
-      if (!pbcEnabled)
-        return -1;
+        if (!mPbcEnabled) return -1;
 
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.PBC_PWR_LIMIT);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.PBC_PWR_LIMIT);
     }
 
     private int getAppProfileFanCap(String packageName) {
-      if (!fanCapEnabled)
-        return -1;
+        if (!mFanCapEnabled) return -1;
 
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.FAN_PWM_CAP);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.FAN_PWM_CAP);
     }
 
     private int getAppProfileVoltTempMode(String packageName) {
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.VOLT_TEMP_MODE);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.VOLT_TEMP_MODE);
     }
 
     private int getAppProfileAggresivePrismEnable(String packageName) {
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.AGGRESSIVE_PRISM_ENABLE);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.AGGRESSIVE_PRISM_ENABLE);
     }
 
     private int getAppProfileDevicePowerMode(String packageName) {
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.SYSTEM_POWER_MODE);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.SYSTEM_POWER_MODE);
     }
 
     public String getAppProfileRegionEnableList(String packageName) {
-      return mAppProfile.getApplicationProfileString(packageName, NvAppProfileSettingId.SET_REGION_LIST);
+        return mAppProfile.getApplicationProfileString(packageName, NvAppProfileSettingId.SET_REGION_LIST);
     }
 
     public int getAppProfileNvidiaBBCApps(String packageName) {
-      return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.BBC_APPS);
+        return mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.BBC_APPS);
     }
 
     private int retrievePowerMode() {
-        int powerMode = -1;
-        String strPowerMode = SystemProperties.get(NvConstants.NvPowerModeProperty);
-        if (strPowerMode != null) {
+        final String powerMode = SystemProperties.get(NvConstants.NvPowerModeProperty);
+        if (powerMode != null) {
             try {
-                powerMode = Integer.parseInt(strPowerMode);
-            }
-            catch (NumberFormatException nfe) {
-                // no need to worry about this
+                return Integer.parseInt(powerMode);
+            } catch (NumberFormatException ex) {
+                // Fallthrough to error case
             }
         }
-        return powerMode;
-    }
 
-    private void setGpuModeSetting(String packageName) {
-      if (mAppProfile.getApplicationProfile(packageName, NvAppProfileSettingId.GPU_MODESET_ENABLE) != 1) {
-      }
+        return -1;
     }
 
-    /*
+    /**
      * Interface for the caller
      */
     public void setAppProfile(String packageName) {
-      // Greedy initialization of App Profiles
-      if (!initAppProfiles) {
-        PackageManager pm = mContext.getPackageManager();
-        if (pm.hasSystemFeature(FEATURE_POWER_BUDGET_CONTROL))
-          pbcEnabled = true;
-        if (pm.hasSystemFeature(FEATURE_FAN_ON_DEVICE))
-          fanCapEnabled = true;
-        Log.w(TAG, "App Profiles: Enabled");
-        initAppProfiles = true;
-      }
-      mAppProfile.powerHint(packageName);
-      setGpuModeSetting(packageName);
+        // Greedy initialization of App Profiles
+        if (!mInitialisedAppProfiles) {
+            PackageManager pm = mContext.getPackageManager();
+            if (pm.hasSystemFeature(FEATURE_POWER_BUDGET_CONTROL)) mPbcEnabled = true;
+            if (pm.hasSystemFeature(FEATURE_FAN_ON_DEVICE)) mFanCapEnabled = true;
+
+            Log.w(TAG, "Enabled");
+            mInitialisedAppProfiles = true;
+        }
+
+        mAppProfile.powerHint(packageName);
+
+        Intent intent = new Intent(APP_START_ACTION);
+        intent.setPackage(APP_START_TARGET_PACKAGE);
+        intent.putExtra("AppStartId", packageName);
+        mContext.sendBroadcastAsUser(intent, UserHandle.CURRENT, "nvidia.permission.READ_APP_START_INFO");
     }
 }
diff --git a/core/java/com/nvidia/NvAppProfiles.java b/core/java/com/nvidia/NvAppProfiles.java
index b9919415ec8..1c88b725afd 100644
--- a/core/java/com/nvidia/NvAppProfiles.java
+++ b/core/java/com/nvidia/NvAppProfiles.java
@@ -1,22 +1,24 @@
 package com.nvidia;
 
-import android.util.Log;
 import android.content.Context;
 import android.content.Intent;
-import android.os.DeadObjectException;
+import android.os.IBinder;
+import android.os.RemoteException;
 import android.os.ServiceManager;
+import android.util.Log;
+
 import com.nvidia.NvCPLSvc.INvCPLRemoteService;
 
 public class NvAppProfiles {
-    private static final String TAG = "NvAppProfiles";
-
     /**
      * Unique name used for NvCPLSvc to whitelist this class
      */
     static final String NV_APP_PROFILES_NAME = "Frameworks_NvAppProfiles";
     static final boolean DEBUG = false;
+    private static final String TAG = "NvAppProfiles";
     private final Context mContext;
     private INvCPLRemoteService mNvCPLSvc = null;
+    private IBinder mNvCPLSvcBinder = null;
 
     /**
      * Callback class given by the NvCPLService
@@ -27,113 +29,49 @@ public class NvAppProfiles {
     }
 
     public int getApplicationProfile(String packageName, int settingId) {
-        int result = -1;
         getNvCPLService();
-
-        if (mNvCPLSvc == null) {
-            if (DEBUG) {
-                Log.d(TAG, "NvCPLSvc is null");
-            }
-
-        } else {
+        if (mNvCPLSvc != null) {
             try {
-                result = mNvCPLSvc.getAppProfileSettingInt(packageName, settingId);
-            } catch (DeadObjectException doe) {
-                if (DEBUG) {
-                    Log.w(TAG, "App Profile: DeadObjectException trying to get new service object");
-                }
-
-                mNvCPLSvc = null;
-                getNvCPLService();
-                try {
-                    if (mNvCPLSvc != null) {
-                        result = mNvCPLSvc.getAppProfileSettingInt(packageName, settingId);
-                    }
-                } catch (Exception ex) {
-                }
-            } catch (Exception e) {
-                Log.w(TAG, "App Profile: Failed to retrieve profile. Error="+e.getMessage());
+                return mNvCPLSvc.getAppProfileSettingInt(packageName, settingId);
+            } catch (RemoteException ex) {
+                Log.w(TAG, "Failed to retrieve profile setting. Error=" + ex.getMessage());
             }
         }
 
-        return result;
+        return -1;
     }
 
     public String getApplicationProfileString(String packageName, int settingId) {
-        String result = null;
         getNvCPLService();
-        if (mNvCPLSvc == null) {
-            if (DEBUG) {
-                Log.d(TAG, "NvCPLSvc is null");
-            }
-
-        } else {
+        if (mNvCPLSvc != null) {
             try {
-                result = mNvCPLSvc.getAppProfileSettingString(packageName, settingId);
-            } catch (DeadObjectException doe) {
-                if (DEBUG) {
-                    Log.w(TAG, "App Profile: DeadObjectException trying to get new service object");
-                }
-
-                mNvCPLSvc = null;
-                getNvCPLService();
-                try {
-                    if (mNvCPLSvc != null) {
-                        result = mNvCPLSvc.getAppProfileSettingString(packageName, settingId);
-                    }
-                } catch (Exception ex) {
-                }
-            } catch (Exception e) {
-                Log.w(TAG, "App Profile: Failed to retrieve profile. Error="+e.getMessage());
+                return mNvCPLSvc.getAppProfileSettingString(packageName, settingId);
+            } catch (RemoteException ex) {
+                Log.w(TAG, "Failed to retrieve profile setting. Error=" + ex.getMessage());
             }
         }
 
-        return result;
+        return null;
     }
 
-    public void powerHint(String packageName) {
-        getNvCPLService();
-        if (mNvCPLSvc != null) {
-            try {
-                mNvCPLSvc.powerHint(packageName);
-            } catch (DeadObjectException doe) {
-                if (DEBUG) {
-                    Log.w(TAG, "App Profile: DeadObjectException trying to get new service object");
-                }
+    public void setPowerMode(int index) {
+        if (DEBUG) Log.w(TAG, "Setting power mode: " + String.valueOf(index));
 
-                mNvCPLSvc = null;
-                getNvCPLService();
-                try {
-                    if (mNvCPLSvc != null) {
-                        mNvCPLSvc.powerHint(packageName);
-                    }
-                } catch (Exception ex) {
-                }
-            } catch (Exception e) {
-                Log.w(TAG, "App Profile: Failed powerHint(). Error="+e.getMessage());
-            }
-        }
+        Intent intent = new Intent();
+        intent.setClassName(NvConstants.NvCPLSvc, NvConstants.NvCPLService);
+        intent.putExtra(NvConstants.NvOrigin, 1);
+        intent.putExtra(NvConstants.NvPowerMode , String.valueOf(index));
+
+        handleIntent(intent);
     }
 
-    private void sendNvCPLSvcIntent(Intent intent) {
+    public void powerHint(String packageName) {
+        getNvCPLService();
         if (mNvCPLSvc != null) {
             try {
-                mNvCPLSvc.handleIntent(intent);
-            } catch (DeadObjectException doe) {
-                if (DEBUG) {
-                    Log.w(TAG, "App Profile: DeadObjectException trying to get new service object");
-                }
-
-                mNvCPLSvc = null;
-                getNvCPLService();
-                try {
-                    if (mNvCPLSvc != null) {
-                        mNvCPLSvc.handleIntent(intent);
-                    }
-                } catch (Exception ex) {
-                }
-            } catch (Exception e) {
-                Log.w(TAG, "App Profile: Failed to send intent. Error="+e.getMessage());
+                mNvCPLSvc.powerHint(packageName);
+            } catch (RemoteException ex) {
+                Log.w(TAG, "Failed to send power hint. Error=" + ex.getMessage());
             }
         }
     }
@@ -143,32 +81,16 @@ public class NvAppProfiles {
         if (mNvCPLSvc != null) {
             try {
                 mNvCPLSvc.handleIntent(intent);
-            } catch (DeadObjectException doe) {
-                if (DEBUG) {
-                    Log.w(TAG, "App Profile: DeadObjectException trying to get new service object");
-                }
-
-                mNvCPLSvc = null;
-                getNvCPLService();
-                try {
-                    if (mNvCPLSvc != null) {
-                        mNvCPLSvc.handleIntent(intent);
-                    }
-                } catch (Exception ex) {
-                }
-            } catch (Exception e) {
-                Log.w(TAG, "App Profile: Failed to handle intent. Error="+e.getMessage());
+            } catch (RemoteException ex) {
+                Log.w(TAG, "Failed to handle intent. Error=" + ex.getMessage());
             }
         }
     }
 
     private void getNvCPLService() {
-        if (mNvCPLSvc == null) {
-            try {
-                mNvCPLSvc = INvCPLRemoteService.Stub.asInterface(ServiceManager.getService("nvcpl"));
-            } catch (Exception ex) {
-                Log.e(TAG, "Failed to bind to service. " + ex.getMessage());
-            }
+        if (mNvCPLSvc == null || mNvCPLSvcBinder == null || !mNvCPLSvcBinder.isBinderAlive()) {
+            mNvCPLSvcBinder = ServiceManager.getService("nvcpl");
+            mNvCPLSvc = INvCPLRemoteService.Stub.asInterface(mNvCPLSvcBinder);
         }
     }
 }
diff --git a/core/java/com/nvidia/NvCPLSvc/NvAppProfile.java b/core/java/com/nvidia/NvCPLSvc/NvAppProfile.java
index 4d17ea45fdd..a3f2d71c540 100644
--- a/core/java/com/nvidia/NvCPLSvc/NvAppProfile.java
+++ b/core/java/com/nvidia/NvCPLSvc/NvAppProfile.java
@@ -3,7 +3,6 @@ package com.nvidia.NvCPLSvc;
 import android.net.ProxyInfo;
 import android.os.Parcel;
 import android.os.Parcelable;
-import android.os.Parcelable.Creator;
 import android.util.SparseArray;
 
 public class NvAppProfile implements Parcelable {
@@ -18,8 +17,8 @@ public class NvAppProfile implements Parcelable {
     };
     public final String pkgName;
     public final String pkgVersion;
-    public SparseArray<String> settings;
     public final int typeId;
+    public SparseArray<String> settings;
 
     public NvAppProfile(int typeId, String pkgName, String pkgVersion, SparseArray<String> settings) {
         this.typeId = typeId;
@@ -28,21 +27,6 @@ public class NvAppProfile implements Parcelable {
         this.settings = settings;
     }
 
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(Parcel parcel, int flag) {
-        parcel.writeInt(this.typeId);
-        parcel.writeString(encodeNull(this.pkgName));
-        parcel.writeString(encodeNull(this.pkgVersion));
-        parcel.writeInt(this.settings.size());
-        for (int i = 0; i < this.settings.size(); i++) {
-            parcel.writeInt(this.settings.keyAt(i));
-            parcel.writeString((String) this.settings.valueAt(i));
-        }
-    }
-
     private static NvAppProfile createFromParcel(Parcel parcel) {
         int typeId = parcel.readInt();
         String pkgName = decodeNull(parcel.readString());
@@ -62,4 +46,19 @@ public class NvAppProfile implements Parcelable {
     private static String decodeNull(String str) {
         return !str.equals(ProxyInfo.LOCAL_EXCL_LIST) ? str : null;
     }
+
+    public int describeContents() {
+        return 0;
+    }
+
+    public void writeToParcel(Parcel parcel, int flag) {
+        parcel.writeInt(this.typeId);
+        parcel.writeString(encodeNull(this.pkgName));
+        parcel.writeString(encodeNull(this.pkgVersion));
+        parcel.writeInt(this.settings.size());
+        for (int i = 0; i < this.settings.size(); i++) {
+            parcel.writeInt(this.settings.keyAt(i));
+            parcel.writeString((String) this.settings.valueAt(i));
+        }
+    }
 }
diff --git a/core/java/com/nvidia/NvCPLSvc/NvSaverAppInfo.java b/core/java/com/nvidia/NvCPLSvc/NvSaverAppInfo.java
index 03ae7093fa2..76f1f05d618 100644
--- a/core/java/com/nvidia/NvCPLSvc/NvSaverAppInfo.java
+++ b/core/java/com/nvidia/NvCPLSvc/NvSaverAppInfo.java
@@ -3,7 +3,6 @@ package com.nvidia.NvCPLSvc;
 import android.graphics.drawable.Drawable;
 import android.os.Parcel;
 import android.os.Parcelable;
-import android.os.Parcelable.Creator;
 
 public class NvSaverAppInfo implements Parcelable {
     public static final Creator<NvSaverAppInfo> CREATOR = new Creator<NvSaverAppInfo>() {
@@ -15,6 +14,7 @@ public class NvSaverAppInfo implements Parcelable {
             return new NvSaverAppInfo[size];
         }
     };
+
     public static final int NVSAVER_ACTIVITY_HIGH = 1;
     public static final int NVSAVER_ACTIVITY_LOW = 3;
     public static final int NVSAVER_ACTIVITY_MIDIUM = 2;
@@ -22,132 +22,132 @@ public class NvSaverAppInfo implements Parcelable {
     public static final int NVSAVER_LIST_NONE = 1;
     public static final int NVSAVER_LIST_WHITELIST = 2;
     public static final int NV_APP_OPTIMIZE_LIST = 4;
-    private int appActivity;
-    private Drawable appIcon;
-    private String appLabel;
-    public int appList;
-    public String pkgName;
-    private float powerSaver;
-    public long totalWakeupStatsTime;
-    public int uid;
-    public long wakeupStatsTime;
-    public int wakeupTimes;
-    public int wowWakeupTimes;
+    public int mAppList;
+    public String mPkgName;
+    public long mTotalWakeupStatsTime;
+    public int mUid;
+    public long mWakeupStatsTime;
+    public int mWakeupTimes;
+    public int mWowWakeupTimes;
+    private int mAppActivity;
+    private Drawable mAppIcon;
+    private String mAppLabel;
+    private float mPowerSaver;
 
     public NvSaverAppInfo(Parcel pl) {
-        this.uid = pl.readInt();
-        this.appList = pl.readInt();
-        this.wakeupTimes = pl.readInt();
-        this.wowWakeupTimes = pl.readInt();
-        this.pkgName = pl.readString();
-        this.wakeupStatsTime = pl.readLong();
-        this.totalWakeupStatsTime = pl.readLong();
-        this.appLabel = null;
-        this.appIcon = null;
-        this.appActivity = 0;
-        this.powerSaver = 0.0f;
+        mUid = pl.readInt();
+        mAppList = pl.readInt();
+        mWakeupTimes = pl.readInt();
+        mWowWakeupTimes = pl.readInt();
+        mPkgName = pl.readString();
+        mWakeupStatsTime = pl.readLong();
+        mTotalWakeupStatsTime = pl.readLong();
+        mAppLabel = null;
+        mAppIcon = null;
+        mAppActivity = 0;
+        mPowerSaver = 0.0f;
     }
 
     public NvSaverAppInfo(int u, int a, int w, int wow, String pkg, long t1, long t2) {
-        this.uid = u;
-        this.appList = a;
-        this.wakeupTimes = w;
-        this.wowWakeupTimes = wow;
-        this.pkgName = pkg;
-        this.wakeupStatsTime = t1;
-        this.totalWakeupStatsTime = t2;
-        this.appLabel = null;
-        this.appIcon = null;
-        this.appActivity = 0;
-        this.powerSaver = 0.0f;
+        mUid = u;
+        mAppList = a;
+        mWakeupTimes = w;
+        mWowWakeupTimes = wow;
+        mPkgName = pkg;
+        mWakeupStatsTime = t1;
+        mTotalWakeupStatsTime = t2;
+        mAppLabel = null;
+        mAppIcon = null;
+        mAppActivity = 0;
+        mPowerSaver = 0.0f;
     }
 
     public String getAppLabel() {
-        return this.appLabel;
+        return mAppLabel;
     }
 
     public void setAppLabel(String appLabel) {
-        this.appLabel = appLabel;
+        mAppLabel = appLabel;
     }
 
     public Drawable getAppIcon() {
-        return this.appIcon;
+        return mAppIcon;
     }
 
     public void setAppIcon(Drawable appIcon) {
-        this.appIcon = appIcon;
+        mAppIcon = appIcon;
     }
 
     public int getAppActivity() {
-        return this.appActivity;
+        return mAppActivity;
     }
 
     public void setAppActivity(int activity) {
-        this.appActivity = activity;
+        mAppActivity = activity;
     }
 
     public String getPkgName() {
-        return this.pkgName;
+        return mPkgName;
     }
 
     public void setPkgName(String pkgName) {
-        this.pkgName = pkgName;
+        mPkgName = pkgName;
     }
 
     public int getUid() {
-        return this.uid;
+        return mUid;
     }
 
     public void setUid(int uid) {
-        this.uid = uid;
+        mUid = uid;
     }
 
     public int getWakeupTimes() {
-        return this.wakeupTimes;
+        return mWakeupTimes;
     }
 
     public void setWakeupTimes(int wakeupTimes) {
-        this.wakeupTimes = wakeupTimes;
+        mWakeupTimes = wakeupTimes;
     }
 
     public int getWowWakeupTimes() {
-        return this.wowWakeupTimes;
+        return mWowWakeupTimes;
     }
 
     public void setWowWakeupTimes(int wowWakeupTimes) {
-        this.wowWakeupTimes = wowWakeupTimes;
+        mWowWakeupTimes = wowWakeupTimes;
     }
 
     public long getTotalWakeupStatsTime() {
-        return this.totalWakeupStatsTime;
+        return mTotalWakeupStatsTime;
     }
 
     public void setTotalWakeupStatsTime(long totalWakeupStatsTime) {
-        this.totalWakeupStatsTime = totalWakeupStatsTime;
+        mTotalWakeupStatsTime = totalWakeupStatsTime;
     }
 
     public long getWakeupStatsTime() {
-        return this.wakeupStatsTime;
+        return mWakeupStatsTime;
     }
 
     public void setWakeupStatsTime(long wakeupStatsTime) {
-        this.wakeupStatsTime = wakeupStatsTime;
+        mWakeupStatsTime = wakeupStatsTime;
     }
 
     public int getAppList() {
-        return this.appList;
+        return mAppList;
     }
 
     public void setAppList(int appList) {
-        this.appList = appList;
+        mAppList = appList;
     }
 
     public float getPowerSaver() {
-        return this.powerSaver;
+        return mPowerSaver;
     }
 
     public void setPowerSaver(float powerSaver) {
-        this.powerSaver = powerSaver;
+        mPowerSaver = powerSaver;
     }
 
     public int describeContents() {
@@ -155,12 +155,12 @@ public class NvSaverAppInfo implements Parcelable {
     }
 
     public void writeToParcel(Parcel dest, int flags) {
-        dest.writeInt(this.uid);
-        dest.writeInt(this.appList);
-        dest.writeInt(this.wakeupTimes);
-        dest.writeInt(this.wowWakeupTimes);
-        dest.writeString(this.pkgName);
-        dest.writeLong(this.wakeupStatsTime);
-        dest.writeLong(this.totalWakeupStatsTime);
+        dest.writeInt(mUid);
+        dest.writeInt(mAppList);
+        dest.writeInt(mWakeupTimes);
+        dest.writeInt(mWowWakeupTimes);
+        dest.writeString(mPkgName);
+        dest.writeLong(mWakeupStatsTime);
+        dest.writeLong(mTotalWakeupStatsTime);
     }
 }
diff --git a/core/java/com/nvidia/NvConstants.java b/core/java/com/nvidia/NvConstants.java
index e018563a5f9..d424d4cf28b 100644
--- a/core/java/com/nvidia/NvConstants.java
+++ b/core/java/com/nvidia/NvConstants.java
@@ -8,9 +8,11 @@ public class NvConstants {
     public static final String NvMaxGpuMode = "com.nvidia.NvCPLSvc.MaxGpuMode";
     public static final String NvOrigin = "com.nvidia.NvCPLSvc.Origin";
     public static final String NvPowerMode = "com.nvidia.NvCPLSvc.NV_POWER_MODE";
-    public static final String NvPowerModeProperty = "persist.sys.NV_POWER_MODE";
+    public static final String NvPowerModeProperty = "persist.vendor.sys.NV_POWER_MODE";
     public static final String NvStateId = "com.nvidia.NvCPLSvc.StateID";
     public static final String NvTCPDivisor = "com.nvidia.NvCPLSvc.NV_TCPDIVISOR";
     public static final String NvThermalStats = "com.nvidia.peripheralservice.NvThermalStats";
-    public static final int maxPerfMode = 0;
+    public static final int NV_POWER_MODE_MAX_PERF = 0;
+    public static final int NV_POWER_MODE_OPTIMIZED = 1;
+    public static final int NV_POWER_MODE_BATTERY_SAVER = 2;
 }
diff --git a/core/java/com/nvidia/NvWhitelistService.java b/core/java/com/nvidia/NvWhitelistService.java
index fc48d363f32..4f638c5655d 100644
--- a/core/java/com/nvidia/NvWhitelistService.java
+++ b/core/java/com/nvidia/NvWhitelistService.java
@@ -1,16 +1,24 @@
 package com.nvidia;
 
 import android.content.Context;
-import android.net.ProxyInfo;
+import android.content.res.XmlResourceParser;
+
 import android.util.Log;
+
 import com.android.internal.R;
+
+import java.util.ArrayList;
+import java.io.IOException;
+
+import org.json.JSONObject;
 import org.json.JSONArray;
 import org.json.JSONException;
+import org.xmlpull.v1.XmlPullParserException;
 
 public class NvWhitelistService {
     private static final String TAG = "NvWhitelistService";
-    private Context mContext;
     private JSONArray mWhiteListArray;
+    private Context mContext;
 
     public NvWhitelistService(Context context) {
         Context appContext = context.getApplicationContext();
@@ -19,53 +27,90 @@ public class NvWhitelistService {
         } else {
             mContext = appContext;
         }
-        //mWhiteListArray = parseXml(mContext.getResources().getXml(R.xml.tv_launhcer_app_white_list));
+
+        mWhiteListArray = parseXml(mContext.getResources().getXml(R.xml.tv_launhcer_app_white_list));
     }
 
     public boolean isWhiteApp(String pkgName) {
-        boolean isWhite = false;
-        for (int index = 0; index < mWhiteListArray.length(); index++) {
+        if (mWhiteListArray == null) return false;
+
+        for (int i = 0; i < mWhiteListArray.length(); i++) {
             try {
-                isWhite = pkgName.equals(mWhiteListArray.getJSONObject(index).getString("packageName"));
+                if (pkgName.equals(mWhiteListArray.getJSONObject(i).getString("packageName"))) {
+                    return true;
+                }
             } catch (JSONException ex) {
                 Log.w(TAG, ex.getMessage());
             }
-            if (isWhite) {
-                break;
-            }
         }
-        return isWhite;
+
+        return false;
     }
 
     public boolean isTvGame(String pkgName) {
-        boolean isGame = false;
-        for (int index = 0; index < mWhiteListArray.length(); index++) {
+        if (mWhiteListArray == null) return false;
+
+        for (int i = 0; i < mWhiteListArray.length(); i++) {
             try {
-                isGame = mWhiteListArray.getJSONObject(index).getString("packageName").equals(pkgName) ? mWhiteListArray.getJSONObject(index).getString("isGame").equals("true") : false;
+                if (mWhiteListArray.getJSONObject(i).getString("packageName").equals(pkgName) &&
+                        mWhiteListArray.getJSONObject(i).getString("isGame").equals("true")) {
+                    return true;
+                }
             } catch (JSONException ex) {
                 Log.w(TAG, ex.getMessage());
             }
-            if (isGame) {
-                break;
-            }
         }
-        return isGame;
+
+        return false;
     }
 
     public String getBannerName(String pkgName) {
-        String bannerName = ProxyInfo.LOCAL_EXCL_LIST;
-        int index = 0;
-        while (index < mWhiteListArray.length()) {
-            String curPkgNameValue = ProxyInfo.LOCAL_EXCL_LIST;
+        for (int i = 0; i < mWhiteListArray.length(); i++) {
             try {
-                if (mWhiteListArray.getJSONObject(index).getString("packageName").equals(pkgName)) {
-                    return mWhiteListArray.getJSONObject(index).getString("bannerName");
+                if (mWhiteListArray.getJSONObject(i).getString("packageName").equals(pkgName)) {
+                    return mWhiteListArray.getJSONObject(i).getString("bannerName");
                 }
-                index++;
             } catch (JSONException ex) {
                 Log.w(TAG, ex.getMessage());
             }
         }
-        return bannerName;
+
+        return "";
+    }
+
+    private JSONArray parseXml(XmlResourceParser xmlParser) {
+        if (xmlParser == null) return null;
+
+        JSONObject jsonObj = null;
+        ArrayList<JSONObject> widgetConfigs = new ArrayList<>();
+        try {
+            int type = xmlParser.getEventType();
+            while (type != XmlResourceParser.END_DOCUMENT) {
+                switch (type) {
+                    case XmlResourceParser.START_TAG:
+                        if (xmlParser.getName().equals("app")) {
+                            jsonObj = new JSONObject();
+                            for (int i = 0; i < xmlParser.getAttributeCount(); i++) {
+                                jsonObj.put(xmlParser.getAttributeName(i), xmlParser.getAttributeValue(i));
+                            }
+                            break;
+                        }
+                        break;
+                    case XmlResourceParser.END_TAG:
+                        if (xmlParser.getName().equals("app") && jsonObj != null) {
+                            widgetConfigs.add(jsonObj);
+                            break;
+                        }
+                        break;
+                    default:
+                        break;
+                }
+                type = xmlParser.next();
+            }
+        } catch (IOException | JSONException | XmlPullParserException e) {
+            e.printStackTrace();
+        }
+
+        return new JSONArray(widgetConfigs);
     }
 }
diff --git a/core/java/com/nvidia/profilemanager/NvAppProfileSettingId.java b/core/java/com/nvidia/profilemanager/NvAppProfileSettingId.java
index 6cc3f7f814e..0c78f2b8dc5 100644
--- a/core/java/com/nvidia/profilemanager/NvAppProfileSettingId.java
+++ b/core/java/com/nvidia/profilemanager/NvAppProfileSettingId.java
@@ -1,85 +1,93 @@
 package com.nvidia.profilemanager;
 
 public class NvAppProfileSettingId {
-    public static int RESOVERRIDE_SCALE_FACTOR               =   5;
-    public static int STEREO_PERF_WIDTH                      =   7;
-    public static int RESOVERRIDE_PERF_WIDTH                 =   8;
-    public static int FORCE_HW_UI                            =   9;
-    public static int CORE_BIAS                              =  17;
-    public static int CPU_FREQ_BIAS                          =  18;
-    public static int GPU_CORE_CAP                           =  19;
-    public static int SCALING_MIN_FREQ                       =  20;
-    public static int GPU_SCALING                            =  21;
-    public static int PBC_PWR_LIMIT                          =  22;
-    public static int FAN_PWM_CAP                            =  23;
-    public static int VOLT_TEMP_MODE                         =  24;
-    public static int FRAME_RATE_LIMIT                       =  26;
-    public static int DISABLE_APM                            =  29;
-    public static int EDP_MODE                               =  30;
-    public static int GPU_MODE                               =  35;
-    public static int STYLUS_FINGER_ONLY_MODE                =  40;
-    public static int STEREO_PERF_SCALE_FACTOR               =  43;
-    public static int DISABLE_BUFFER_AGE                     =  47;
-    public static int SYSTEM_POWER_MODE                      =  48;
-    public static int CUSTOM_PROFILE_BLACKLIST               =  51;
-    public static int BLOCK_NETWORK_ACCESS                   =  53;
-    public static int MAX_CPU_CORES                          =  58;
-    public static int AGGRESSIVE_PRISM_ENABLE                =  59;
-    public static int BLOCK_ON_NETWORK                       =  60;
-    public static int MAX_CPU_FREQ_PCT                       =  61;
-    public static int DEPTH_COMPRESSION                      =  62;
-    public static int OGL_THREADCONTROL                      =  63;
-    public static int OGL_SKIP_ENABLED_UNSET_ARRAY           =  64;
-    public static int CMU_GTM_MAPPING_LUT                    =  65;
-    public static int OGL_CLEAR_METERING                     =  66;
-    public static int KILL_PROCESS_BELOW_ADJ                 =  67;
-    public static int EGL_REPORT_ES1_CONFIG_ONLY             =  69;
-    public static int VIDEO_IQ                               =  70;
-    public static int CAMERA_MEMORY                          =  71;
-    public static int PERF_FP                                =  72;
-    public static int MIN_CPU_CORES                          =  73;
-    public static int PROMOTE_SURFACE_TO_32BIT               =  74;
-    public static int AFFINITY_DAEMON_ENABLE                 =  75;
-    public static int CUSTOM_PROFILE_SYSTEM_WHITELIST        =  76;
-    public static int FORCEONCPU                             =  77;
-    public static int KEY_DEVICE_ID_HASH                     =  78;
-    public static int GSYNC_WHITELIST                        =  79;
-    public static int GSYNC_BLACKLIST                        =  80;
-    public static int TOUCH_MODE                             =  81;
-    public static int DISPLAY_UPSCALE_HEIGHT                 =  82;
-    public static int DISPLAY_UPSCALE_WIDTH                  =  83;
-    public static int OGL_APP_RUNTIME_VERTEX_ATTRIB_SOURCING =  84;
-    public static int MAXWELL_TILEDCACHE                     =  85;
-    public static int OGL_HIDE_EXTENSIONS_STRING             =  86;
-    public static int NVIDIA_WEBVIEW                         =  87;
-    public static int OGL_HIDE_EXTENSIONS                    =  88;
-    public static int HDD_DIALOG_FREQ                        =  89;
-    public static int HDD_DIALOG_TEXT                        =  90;
-    public static int HDD_DIALOG_THRESHOLD                   =  91;
-    public static int HDD_DIALOG_ENABLE                      =  92;
-    public static int TCP_DIVISOR                            =  93;
-    public static int BBC_APPS                               =  94;
-    public static int HDD_STATS_ENABLE                       =  95;
-    public static int HDD_DIALOG_REMIND_ME_LATER_FREQ        =  96;
-    public static int HDD_STATS_FREQ                         =  97;
-    public static int HDD_DIALOG_STR_THRESHOLD               =  98;
-    public static int OGL_VERSION_OVERRIDE                   =  99;
-    public static int OGL_ES_VERSION_OVERRIDE                = 100;
-    public static int MULTI_CHANNEL_SWITCH_MODE              = 101;
-    public static int VIDEO_FRC_ENABLE                       = 102;
-    public static int VIDEO_SECURE_DECODE                    = 103;
-    public static int VIDEO_TS_FILTERING                     = 104;
-    public static int NVIDIA_VIDEO_CERTIFICATION_ENABLED     = 105;
-    public static int OGL_SHADER_PORTABILITY_WARNINGS        = 106;
-    public static int OGL_THREADCONTROL2                     = 107;
-    public static int OGL_EXTRA_CGC_OPTION                   = 108;
-    public static int DISABLE_APP                            = 109;
-    public static int SET_REGION_LIST                        = 110;
-    public static int PINNING_ENABLE                         = 111;
-    public static int PINNING_ORDER                          = 112;
-    public static int GPU_MODESET_ENABLE                     = 113;
-    public static int AVS_DELAY_ENABLE                       = 114;
-    public static int BLACKLIST_USB_30                       = 115;
-    public static int DRM_DIALOG_ENABLE                      = 116;
-    public static int FILTER_EGLCONFIGS                      = 117;
+    public static int RESOVERRIDE_SCALE_FACTOR = 5;
+    public static int STEREO_PERF_WIDTH = 7;
+    public static int RESOVERRIDE_PERF_WIDTH = 8;
+    public static int FORCE_HW_UI = 9;
+    public static int CORE_BIAS = 17;
+    public static int CPU_FREQ_BIAS = 18;
+    public static int GPU_CORE_CAP = 19;
+    public static int SCALING_MIN_FREQ = 20;
+    public static int GPU_SCALING = 21;
+    public static int PBC_PWR_LIMIT = 22;
+    public static int FAN_PWM_CAP = 23;
+    public static int VOLT_TEMP_MODE = 24;
+    public static int FRAME_RATE_LIMIT = 26;
+    public static int DISABLE_APM = 29;
+    public static int EDP_MODE = 30;
+    public static int GPU_MODE = 35;
+    public static int STYLUS_FINGER_ONLY_MODE = 40;
+    public static int STEREO_PERF_SCALE_FACTOR = 43;
+    public static int DISABLE_BUFFER_AGE = 47;
+    public static int SYSTEM_POWER_MODE = 48;
+    public static int CUSTOM_PROFILE_BLACKLIST = 51;
+    public static int BLOCK_NETWORK_ACCESS = 53;
+    public static int MAX_CPU_CORES = 58;
+    public static int AGGRESSIVE_PRISM_ENABLE = 59;
+    public static int BLOCK_ON_NETWORK = 60;
+    public static int MAX_CPU_FREQ_PCT = 61;
+    public static int DEPTH_COMPRESSION = 62;
+    public static int OGL_THREADCONTROL = 63;
+    public static int OGL_SKIP_ENABLED_UNSET_ARRAY = 64;
+    public static int CMU_GTM_MAPPING_LUT = 65;
+    public static int OGL_CLEAR_METERING = 66;
+    public static int KILL_PROCESS_BELOW_ADJ = 67;
+    public static int EGL_REPORT_ES1_CONFIG_ONLY = 69;
+    public static int VIDEO_IQ = 70;
+    public static int CAMERA_MEMORY = 71;
+    public static int PERF_FP = 72;
+    public static int MIN_CPU_CORES = 73;
+    public static int PROMOTE_SURFACE_TO_32BIT = 74;
+    public static int AFFINITY_DAEMON_ENABLE = 75;
+    public static int CUSTOM_PROFILE_SYSTEM_WHITELIST = 76;
+    public static int FORCEONCPU = 77;
+    public static int KEY_DEVICE_ID_HASH = 78;
+    public static int GSYNC_WHITELIST = 79;
+    public static int GSYNC_BLACKLIST = 80;
+    public static int TOUCH_MODE = 81;
+    public static int DISPLAY_UPSCALE_HEIGHT = 82;
+    public static int DISPLAY_UPSCALE_WIDTH = 83;
+    public static int OGL_APP_RUNTIME_VERTEX_ATTRIB_SOURCING = 84;
+    public static int MAXWELL_TILEDCACHE = 85;
+    public static int OGL_HIDE_EXTENSIONS_STRING = 86;
+    public static int NVIDIA_WEBVIEW = 87;
+    public static int OGL_HIDE_EXTENSIONS = 88;
+    public static int HDD_DIALOG_FREQ = 89;
+    public static int HDD_DIALOG_TEXT = 90;
+    public static int HDD_DIALOG_THRESHOLD = 91;
+    public static int HDD_DIALOG_ENABLE = 92;
+    public static int TCP_DIVISOR = 93;
+    public static int BBC_APPS = 94;
+    public static int HDD_STATS_ENABLE = 95;
+    public static int HDD_DIALOG_REMIND_ME_LATER_FREQ = 96;
+    public static int HDD_STATS_FREQ = 97;
+    public static int HDD_DIALOG_STR_THRESHOLD = 98;
+    public static int OGL_VERSION_OVERRIDE = 99;
+    public static int OGL_ES_VERSION_OVERRIDE = 100;
+    public static int MULTI_CHANNEL_SWITCH_MODE = 101;
+    public static int VIDEO_FRC_ENABLE = 102;
+    public static int VIDEO_SECURE_DECODE = 103;
+    public static int VIDEO_TS_FILTERING = 104;
+    public static int NVIDIA_VIDEO_CERTIFICATION_ENABLED = 105;
+    public static int OGL_SHADER_PORTABILITY_WARNINGS = 106;
+    public static int OGL_THREADCONTROL2 = 107;
+    public static int OGL_EXTRA_CGC_OPTION = 108;
+    public static int DISABLE_APP = 109;
+    public static int SET_REGION_LIST = 110;
+    public static int PINNING_ENABLE = 111;
+    public static int PINNING_ORDER = 112;
+    public static int GPU_MODESET_ENABLE = 113;
+    public static int AVS_DELAY_ENABLE = 114;
+    public static int BLACKLIST_USB_30 = 115;
+    public static int DRM_DIALOG_ENABLE = 116;
+    public static int FILTER_EGLCONFIGS = 117;
+    public static int SHIELD_LOGGING = 118;
+    public static int APP_AUDIO_SWITCH_TO_STEREO = 119;
+    public static int WHITELIST_CUSTOMIZE_BANNER = 120;
+    public static int NV_MAPPER_GAME_LIST = 121;
+    public static int NV_MULTI_CAPTURE_MOD = 122;
+    public static int MEDIA_ENABLE_MSD_HAL = 123;
+    public static int DEEPISP_DISABLED = 124;
+    public static int OGL_GPFIFO_SIZE_ENTRIES = 125;
 }
diff --git a/core/java/com/nvidia/profilemanager/ProfileTypeId.java b/core/java/com/nvidia/profilemanager/ProfileTypeId.java
index ec1c7fcde05..db85b0fc577 100644
--- a/core/java/com/nvidia/profilemanager/ProfileTypeId.java
+++ b/core/java/com/nvidia/profilemanager/ProfileTypeId.java
@@ -3,9 +3,9 @@ package com.nvidia.profilemanager;
 public class ProfileTypeId {
     public static int LAST_RESERVED_TYPE = 9999;
 
-    public static int DEFAULT            =     0;
-    public static int OEM_OVERRIDE       =     1;
-    public static int DEV_OVERRIDE       =     2;
-    public static int USER               = 10000;
-    public static int OPTIMIZED          = 10001;
+    public static int DEFAULT = 0;
+    public static int OEM_OVERRIDE = 1;
+    public static int DEV_OVERRIDE = 2;
+    public static int USER = 10000;
+    public static int OPTIMIZED = 10001;
 }
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index e76cba33cca..0fd4b70cb6b 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -1633,6 +1633,7 @@
   <java-symbol type="xml" name="default_zen_mode_config" />
   <java-symbol type="xml" name="sms_7bit_translation_table" />
   <java-symbol type="xml" name="color_extraction" />
+  <java-symbol type="xml" name="tv_launhcer_app_white_list" />
 
   <java-symbol type="raw" name="color_fade_vert" />
   <java-symbol type="raw" name="color_fade_frag" />
diff --git a/core/res/res/xml/tv_launhcer_app_white_list.xml b/core/res/res/xml/tv_launhcer_app_white_list.xml
new file mode 100644
index 00000000000..df8e625f299
--- /dev/null
+++ b/core/res/res/xml/tv_launhcer_app_white_list.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<black-list-apps>
+    <app bannerName="minecraft_banner" isGame="true" packageName="com.mojang.minecraftpe"/>
+    <app bannerName="pubg_banner" isGame="true" packageName="com.tencent.ig"/>
+    <app bannerName="chrome_banner" isGame="false" packageName="com.android.chrome"/>
+    <app bannerName="aptoide_banner" isGame="false" packageName="cm.aptoide.pt"/>
+    <app bannerName="showbox_banner" isGame="true" packageName="com.tdo.showbox"/>
+    <app bannerName="speedtest_banner" isGame="false" packageName="org.zwanoo.android.speedtest"/>
+    <app bannerName="" isGame="true" packageName="com.google.android.play.games"/>
+</black-list-apps>
-- 
2.28.0

